name: Packer AMI Build

on:
  push:
    branches:
      - main

jobs:
  build-ami:
    name: Build Packer AMI
    runs-on: ubuntu-latest

    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: '1.8.6'

      - name: Create ZIP Archive
        run: zip -r webapp.zip . -x ".git/*" ".gitignore" ".github/*"

      - name: Display ZIP File Location
        run: |
          echo "ZIP file location: $GITHUB_WORKSPACE/webapp.zip"
          
      - name: Print Contents of Directory
        run: ls -l
      
      - name: List contents of webapp.zip
        run: unzip -l ./webapp.zip
      
      - name: Initialize Packer
        run: packer init -upgrade gcp-centos.pkr.hcl || exit 1
        working-directory: packer

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Use gcloud CLI
        run: gcloud info 

      - name: Display .env file
        run: |
          echo "DB_USER=${DB_USER}" >> .env
          echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
          echo "DB_NAME=${DB_NAME}" >> .env
          echo "DB_HOST=${DB_HOST}" >> .env
          echo "PROJECT_ID=${PROJECT_ID}" >> .env
          echo "PUBSUB_TOPIC=${PUBSUB_TOPIC}" >> .env
          cat .env

      - name: Setup node
        uses: actions/setup-node@v2
        with:
           node-version: 14
        
      - name: Install dependencies
        run: npm install 

      - name: Configure MySQL
        run: |
            sudo apt-get update
            sudo apt-get install -y curl  
            sudo apt-get install -y mysql-client
            sudo systemctl start mysql
            sudo systemctl status mysql
            sleep 10
            mysql -u root -p"root" -e "CREATE DATABASE IF NOT EXISTS webapp;"  
        
      - name: Run Integration tests
        run: |
          if npm run test:integration; then
            echo "Tests passed successfully."
          else
            echo "Tests failed."
            exit 1
          fi

      - name: Build AMI with Packer
        run: packer build gcp-centos.pkr.hcl
        working-directory: packer

      - name: Get Machine Image ID and save it to Github env
        run: |
          echo IMAGE_ID=$(jq -r '.builds[0].artifact_id' ./packer/manifest.json | cut -d':' -f2) >> $GITHUB_ENV
        shell: bash

      - name: Create New Instance Template Version
        run: |
          INSTANCE_TEMPLATE=$(gcloud compute instance-templates list --format="value(NAME)")
          INSTANCE_TEMPLATE_SELF_LINK=$(gcloud compute instance-templates describe "${INSTANCE_TEMPLATE}" --region="us-central1" --format="value(selfLink)")
          INSTANCE_GROUP_MANAGER_INSTANCE_GROUP=$(gcloud compute instance-groups list --format="value(NAME)")
          echo "INSTANCE_TEMPLATE=$INSTANCE_TEMPLATE" >> $GITHUB_ENV
          echo "INSTANCE_TEMPLATE_SELF_LINK=$INSTANCE_TEMPLATE_SELF_LINK" >> $GITHUB_ENV
          echo "INSTANCE_GROUP_MANAGER_INSTANCE_GROUP=$INSTANCE_GROUP_MANAGER_INSTANCE_GROUP" >> $GITHUB_ENV
          INSTANCE_NAME="webapp-instance-${{ github.sha }}"
          echo "INSTANCE_NAME=$INSTANCE_NAME" >> $GITHUB_ENV
          IMAGE_ID=${{ env.IMAGE_ID }}
          gcloud compute instances create "${INSTANCE_NAME}" \
            --source-instance-template="${INSTANCE_TEMPLATE_SELF_LINK}" \
            --image="${IMAGE_ID}" \
            --image-project="${{ secrets.PROJECT_ID }}" \
            --zone=us-central1-a 
          NEW_INSTANCE_TEMPLATE_SELF_LINK=$(gcloud compute instance-templates create "webapp-template-${{ github.sha }}" \
            --source-instance="${INSTANCE_NAME}" \
            --source-instance-zone="us-central1-a" \
            --image="${IMAGE_ID}" \
            --instance-template-region="us-central1" \
            --format='value(selfLink)')
          echo "NEW_INSTANCE_TEMPLATE_SELF_LINK=$NEW_INSTANCE_TEMPLATE_SELF_LINK" >> $GITHUB_ENV
          gcloud compute instances delete "${INSTANCE_NAME}" --zone=us-central1-a --quiet
 
      - name: Configure Managed Instance Group
        run: |
          echo "INSTANCE_GROUP_MANAGER_INSTANCE_GROUP=${INSTANCE_GROUP_MANAGER_INSTANCE_GROUP}"
          echo "NEW_INSTANCE_TEMPLATE_SELF_LINK=${NEW_INSTANCE_TEMPLATE_SELF_LINK}"
          gcloud compute instance-groups managed set-instance-template "${INSTANCE_GROUP_MANAGER_INSTANCE_GROUP}" \
            --template="${NEW_INSTANCE_TEMPLATE_SELF_LINK}" \
            --region=us-central1
 
      - name: Start Rolling Update
        run: |
          gcloud compute instance-groups managed rolling-action start-update "${INSTANCE_GROUP_MANAGER_INSTANCE_GROUP}" \
            --version template="${NEW_INSTANCE_TEMPLATE_SELF_LINK}" \
            --region=us-central1 \
            --max-unavailable "0" \
          
      - name: Monitor Update Progress
        run: |
          STATUS="ROLLING_OUT"
          while [[ $STATUS == "ROLLING_OUT" ]]
          do
            INSTANCE_GROUP_STATUS=$(gcloud compute instance-groups managed describe "${INSTANCE_GROUP_MANAGER_INSTANCE_GROUP}" \
              --region=us-central1 \
              --format=json)
            STATUS=$(echo "$INSTANCE_GROUP_STATUS" | jq -r '.isStable')
            echo "Instance group is $STATUS"
            sleep 10
          done
          
          if [[ $STATUS == "ROLLED_OUT" ]]
          then
            exit 0
          else
            exit 1
          fi
