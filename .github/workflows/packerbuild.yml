name: Packer AMI Build

on:
  push:
    branches:
      - main

jobs:
  build-ami:
    name: Build Packer AMI
    runs-on: ubuntu-latest

    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: '1.8.6'

      - name: Create ZIP Archive
        run: zip -r webapp.zip . -x ".git/*" ".gitignore" ".github/*"

      - name: Display ZIP File Location
        run: |
          echo "ZIP file location: $GITHUB_WORKSPACE/webapp.zip"
          
      - name: Print Contents of Directory
        run: ls -l
      
      - name: List contents of webapp.zip
        run: unzip -l ./webapp.zip
      
      - name: Initialize Packer
        run: packer init -upgrade gcp-centos.pkr.hcl || exit 1
        working-directory: packer

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Use gcloud CLI
        run: gcloud info 

      - name: Display .env file
        run: |
          echo "DB_USER=${DB_USER}" >> .env
          echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
          echo "DB_NAME=${DB_NAME}" >> .env
          echo "DB_HOST=${DB_HOST}" >> .env
          cat .env

      - name: Setup node
        uses: actions/setup-node@v2
        with:
           node-version: 14
        
      - name: Install dependencies
        run: npm install 

      - name: Configure MySQL
        run: |
            sudo apt-get update
            sudo apt-get install -y curl  
            sudo apt-get install -y mysql-client
            sudo systemctl start mysql
            sudo systemctl status mysql
            sleep 10
            mysql -u root -p"root" -e "CREATE DATABASE IF NOT EXISTS webapp;"  
        
      - name: Run Integration tests
        run: |
          if npm run test:integration; then
            echo "Tests passed successfully."
          else
            echo "Tests failed."
            exit 1
          fi

      - name: Build AMI with Packer
        run: packer build gcp-centos.pkr.hcl
        working-directory: packer

      - name: Get Machine Image ID and save it to Github env
        run: |
          echo IMAGE_ID=$(jq -r '.builds[0].artifact_id' ./packer/manifest.json | cut -d':' -f2) >> $GITHUB_ENV
        shell: bash

      - name: Create New Instance Template Version
        run: |
          gcloud compute instance-templates create-version new-template \
          --source-instance-template "webapp-instance-template-*" \
          --machine-image = ${{ env.IMAGE_ID }} \
          --metadata = startup-s
          --project ${{ secrets.PROJECT_ID }}

      - name: Configure Managed Instance Group
        run: |
          gcloud compute instance-groups managed set-instance-template web-instance-group-manager \
          --template new-template \
          --zone us-east1-b \
          --project ${{ secrets.PROJECT_ID }}
          
      - name: Start Rolling Update
        run: |
          gcloud compute instance-groups managed rolling-action start-update web-instance-group-manager \
          --version new-template \
          --zone us-east1-b \
          --project ${{ secrets.PROJECT_ID }}

      - name: Monitor Update Progress
        id: monitor_update
        run: |
          status=$(gcloud compute instance-groups managed describe web-instance-group-manager \
            --zone us-east1-b \
            --format='value(instanceGroupStatus.versionStatus[0].status)' \
            --project ${{ secrets.PROJECT_ID }})
          echo "::set-output name=status::$status"

      - name: Wait for Update Completion
        run: |
          while [[ "$(steps.monitor_update.outputs.status)" != "UP_TO_DATE" ]]; do
            sleep 10
            status=$(gcloud compute instance-groups managed describe web-instance-group-manager \
              --zone us-east1-b \
              --format='value(instanceGroupStatus.versionStatus[0].status)' \
              --project ${{ secrets.PROJECT_ID }})
            echo "Current status: $status"
          done